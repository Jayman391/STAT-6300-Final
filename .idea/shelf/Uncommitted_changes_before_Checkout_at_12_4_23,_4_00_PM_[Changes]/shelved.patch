Index: choice_model.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 109,\n   \"metadata\": {\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-11-28T21:15:53.923576Z\",\n     \"start_time\": \"2023-11-28T21:15:53.501095Z\"\n    }\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Time: 0\\n\",\n      \"Time: 10\\n\",\n      \"Time: 20\\n\",\n      \"Time: 30\\n\",\n      \"Time: 40\\n\",\n      \"Time: 50\\n\",\n      \"Time: 60\\n\",\n      \"Time: 70\\n\",\n      \"Time: 80\\n\",\n      \"Time: 90\\n\"\n     ]\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"/usr/local/lib/python3.11/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\\n\",\n      \"  warnings.warn(\\n\",\n      \"/usr/local/lib/python3.11/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\\n\",\n      \"  warnings.warn(\\n\",\n      \"/usr/local/lib/python3.11/site-packages/pymc/distributions/timeseries.py:558: UserWarning: Initial distribution not specified, defaulting to `Normal.dist(0, 100, shape=...)`. You can specify an init_dist manually to suppress this warning.\\n\",\n      \"  warnings.warn(\\n\",\n      \"Auto-assigning NUTS sampler...\\n\",\n      \"Initializing NUTS using jitter+adapt_diag...\\n\",\n      \"Multiprocess sampling (4 chains in 4 jobs)\\n\",\n      \"NUTS: [phi, sigma_ar, ar, sigma]\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"\\n\",\n       \"<style>\\n\",\n       \"    /* Turns off some styling */\\n\",\n       \"    progress {\\n\",\n       \"        /* gets rid of default border in Firefox and Opera. */\\n\",\n       \"        border: none;\\n\",\n       \"        /* Needs to be in here for Safari polyfill so background images work as expected. */\\n\",\n       \"        background-size: auto;\\n\",\n       \"    }\\n\",\n       \"    progress:not([value]), progress:not([value])::-webkit-progress-bar {\\n\",\n       \"        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\\n\",\n       \"    }\\n\",\n       \"    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\\n\",\n       \"        background: #F44336;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\"\n      ],\n      \"text/plain\": [\n       \"<IPython.core.display.HTML object>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"\\n\",\n       \"    <div>\\n\",\n       \"      <progress value='8000' class='' max='8000' style='width:300px; height:20px; vertical-align: middle;'></progress>\\n\",\n       \"      100.00% [8000/8000 00:19&lt;00:00 Sampling 4 chains, 71 divergences]\\n\",\n       \"    </div>\\n\",\n       \"    \"\n      ],\n      \"text/plain\": [\n       \"<IPython.core.display.HTML object>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 30 seconds.\\n\",\n      \"The rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\\n\",\n      \"The effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\\n\",\n      \"There were 71 divergences after tuning. Increase `target_accept` or reparameterize.\\n\",\n      \"Sampling: [y_obs]\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"\\n\",\n       \"<style>\\n\",\n       \"    /* Turns off some styling */\\n\",\n       \"    progress {\\n\",\n       \"        /* gets rid of default border in Firefox and Opera. */\\n\",\n       \"        border: none;\\n\",\n       \"        /* Needs to be in here for Safari polyfill so background images work as expected. */\\n\",\n       \"        background-size: auto;\\n\",\n       \"    }\\n\",\n       \"    progress:not([value]), progress:not([value])::-webkit-progress-bar {\\n\",\n       \"        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\\n\",\n       \"    }\\n\",\n       \"    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\\n\",\n       \"        background: #F44336;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\"\n      ],\n      \"text/plain\": [\n       \"<IPython.core.display.HTML object>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"\\n\",\n       \"    <div>\\n\",\n       \"      <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>\\n\",\n       \"      100.00% [4000/4000 00:00&lt;00:00]\\n\",\n       \"    </div>\\n\",\n       \"    \"\n      ],\n      \"text/plain\": [\n       \"<IPython.core.display.HTML object>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Sampling: [ar, phi, sigma, sigma_ar, y_obs]\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"           mean      sd   hdi_3%  hdi_97%  mcse_mean  mcse_sd  ess_bulk  \\\\\\n\",\n      \"phi[0]   -0.423  65.644 -129.964  113.623      1.289    1.411    2622.0   \\n\",\n      \"phi[1]    0.977  66.437 -127.093  120.406      1.175    1.238    3208.0   \\n\",\n      \"phi[2]   -1.415  67.180 -126.565  125.368      1.511    1.282    1974.0   \\n\",\n      \"phi[3]   -1.380  65.897 -129.812  116.797      1.616    1.286    1697.0   \\n\",\n      \"phi[4]    2.330  69.375 -125.138  129.934      1.870    1.390    1386.0   \\n\",\n      \"ar[0]    -0.048   1.429   -2.803    2.605      0.025    0.033    3583.0   \\n\",\n      \"ar[1]    -0.022   1.495   -2.607    3.035      0.026    0.038    4104.0   \\n\",\n      \"ar[2]    -0.985   1.462   -3.712    1.877      0.026    0.036    3645.0   \\n\",\n      \"ar[3]     0.012   1.354   -2.798    2.462      0.023    0.035    3093.0   \\n\",\n      \"ar[4]     1.007   1.323   -1.520    3.563      0.022    0.030    3833.0   \\n\",\n      \"sigma_ar  1.027   0.986    0.002    2.789      0.018    0.013    2094.0   \\n\",\n      \"sigma     1.063   0.961    0.103    2.741      0.055    0.039     200.0   \\n\",\n      \"\\n\",\n      \"          ess_tail  r_hat  \\n\",\n      \"phi[0]      1687.0   1.00  \\n\",\n      \"phi[1]      2324.0   1.01  \\n\",\n      \"phi[2]      1746.0   1.00  \\n\",\n      \"phi[3]       865.0   1.00  \\n\",\n      \"phi[4]      1715.0   1.01  \\n\",\n      \"ar[0]       1330.0   1.01  \\n\",\n      \"ar[1]       1265.0   1.01  \\n\",\n      \"ar[2]       1081.0   1.00  \\n\",\n      \"ar[3]       1400.0   1.00  \\n\",\n      \"ar[4]       1223.0   1.01  \\n\",\n      \"sigma_ar    1504.0   1.00  \\n\",\n      \"sigma        191.0   1.02  \\n\"\n     ]\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"/usr/local/lib/python3.11/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\\n\",\n      \"  warnings.warn(\\n\",\n      \"/usr/local/lib/python3.11/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\\n\",\n      \"  warnings.warn(\\n\",\n      \"/usr/local/lib/python3.11/site-packages/pymc/distributions/timeseries.py:558: UserWarning: Initial distribution not specified, defaulting to `Normal.dist(0, 100, shape=...)`. You can specify an init_dist manually to suppress this warning.\\n\",\n      \"  warnings.warn(\\n\",\n      \"Auto-assigning NUTS sampler...\\n\",\n      \"Initializing NUTS using jitter+adapt_diag...\\n\",\n      \"Multiprocess sampling (4 chains in 4 jobs)\\n\",\n      \"NUTS: [phi, sigma_ar, ar, sigma]\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"\\n\",\n       \"<style>\\n\",\n       \"    /* Turns off some styling */\\n\",\n       \"    progress {\\n\",\n       \"        /* gets rid of default border in Firefox and Opera. */\\n\",\n       \"        border: none;\\n\",\n       \"        /* Needs to be in here for Safari polyfill so background images work as expected. */\\n\",\n       \"        background-size: auto;\\n\",\n       \"    }\\n\",\n       \"    progress:not([value]), progress:not([value])::-webkit-progress-bar {\\n\",\n       \"        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\\n\",\n       \"    }\\n\",\n       \"    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\\n\",\n       \"        background: #F44336;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\"\n      ],\n      \"text/plain\": [\n       \"<IPython.core.display.HTML object>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"\\n\",\n       \"    <div>\\n\",\n       \"      <progress value='8000' class='' max='8000' style='width:300px; height:20px; vertical-align: middle;'></progress>\\n\",\n       \"      100.00% [8000/8000 00:27&lt;00:00 Sampling 4 chains, 40 divergences]\\n\",\n       \"    </div>\\n\",\n       \"    \"\n      ],\n      \"text/plain\": [\n       \"<IPython.core.display.HTML object>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 37 seconds.\\n\",\n      \"The rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\\n\",\n      \"The effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\\n\",\n      \"There were 40 divergences after tuning. Increase `target_accept` or reparameterize.\\n\",\n      \"Sampling: [y_obs]\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"\\n\",\n       \"<style>\\n\",\n       \"    /* Turns off some styling */\\n\",\n       \"    progress {\\n\",\n       \"        /* gets rid of default border in Firefox and Opera. */\\n\",\n       \"        border: none;\\n\",\n       \"        /* Needs to be in here for Safari polyfill so background images work as expected. */\\n\",\n       \"        background-size: auto;\\n\",\n       \"    }\\n\",\n       \"    progress:not([value]), progress:not([value])::-webkit-progress-bar {\\n\",\n       \"        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\\n\",\n       \"    }\\n\",\n       \"    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\\n\",\n       \"        background: #F44336;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\"\n      ],\n      \"text/plain\": [\n       \"<IPython.core.display.HTML object>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"\\n\",\n       \"    <div>\\n\",\n       \"      <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>\\n\",\n       \"      100.00% [4000/4000 00:00&lt;00:00]\\n\",\n       \"    </div>\\n\",\n       \"    \"\n      ],\n      \"text/plain\": [\n       \"<IPython.core.display.HTML object>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Sampling: [ar, phi, sigma, sigma_ar, y_obs]\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"           mean      sd   hdi_3%  hdi_97%  mcse_mean  mcse_sd  ess_bulk  \\\\\\n\",\n      \"phi[0]   -0.576  68.317 -121.140  131.145      1.259    1.399    2966.0   \\n\",\n      \"phi[1]   -1.579  67.027 -126.471  120.885      1.268    1.311    2820.0   \\n\",\n      \"phi[2]    0.642  64.382 -116.241  125.927      1.224    1.301    2779.0   \\n\",\n      \"phi[3]   -1.226  66.530 -124.487  125.604      1.076    1.269    3870.0   \\n\",\n      \"phi[4]    0.341  67.481 -122.379  129.297      1.314    1.315    2665.0   \\n\",\n      \"phi[5]    1.211  72.005 -139.669  134.571      2.318    2.306    1062.0   \\n\",\n      \"phi[6]   -0.443  68.047 -123.930  123.301      1.550    1.239    1966.0   \\n\",\n      \"phi[7]   -0.459  64.729 -128.198  114.621      1.048    1.302    3810.0   \\n\",\n      \"phi[8]    0.435  66.306 -126.338  119.917      1.160    1.177    3277.0   \\n\",\n      \"phi[9]   -0.398  66.188 -127.010  120.126      1.117    1.253    3513.0   \\n\",\n      \"ar[0]     0.003   1.545   -2.858    3.195      0.024    0.035    3909.0   \\n\",\n      \"ar[1]    -0.016   1.629   -3.011    2.959      0.024    0.048    4702.0   \\n\",\n      \"ar[2]    -0.024   1.573   -3.092    3.026      0.024    0.041    4596.0   \\n\",\n      \"ar[3]     0.006   1.494   -2.938    2.890      0.024    0.042    3902.0   \\n\",\n      \"ar[4]     0.056   1.500   -2.730    2.541      0.024    0.040    4393.0   \\n\",\n      \"ar[5]     0.028   1.616   -2.968    3.014      0.027    0.040    4050.0   \\n\",\n      \"ar[6]    -0.005   1.568   -3.188    2.861      0.024    0.039    4661.0   \\n\",\n      \"ar[7]     0.029   1.558   -2.687    3.106      0.023    0.041    4988.0   \\n\",\n      \"ar[8]     1.034   1.675   -2.111    3.771      0.025    0.046    4322.0   \\n\",\n      \"ar[9]    -0.990   1.478   -3.777    2.013      0.022    0.043    4323.0   \\n\",\n      \"sigma_ar  1.021   0.984    0.000    2.760      0.018    0.013    2098.0   \\n\",\n      \"sigma     1.181   1.016    0.102    2.986      0.069    0.049     148.0   \\n\",\n      \"\\n\",\n      \"          ess_tail  r_hat  \\n\",\n      \"phi[0]       906.0   1.01  \\n\",\n      \"phi[1]      1629.0   1.00  \\n\",\n      \"phi[2]      1576.0   1.00  \\n\",\n      \"phi[3]      2431.0   1.00  \\n\",\n      \"phi[4]      2388.0   1.00  \\n\",\n      \"phi[5]       442.0   1.01  \\n\",\n      \"phi[6]      2507.0   1.00  \\n\",\n      \"phi[7]      2418.0   1.00  \\n\",\n      \"phi[8]      1956.0   1.00  \\n\",\n      \"phi[9]      2421.0   1.00  \\n\",\n      \"ar[0]       1217.0   1.02  \\n\",\n      \"ar[1]       1047.0   1.01  \\n\",\n      \"ar[2]       1238.0   1.01  \\n\",\n      \"ar[3]       1134.0   1.01  \\n\",\n      \"ar[4]        829.0   1.01  \\n\",\n      \"ar[5]       1098.0   1.01  \\n\",\n      \"ar[6]       1085.0   1.01  \\n\",\n      \"ar[7]       1017.0   1.01  \\n\",\n      \"ar[8]       1237.0   1.02  \\n\",\n      \"ar[9]        989.0   1.01  \\n\",\n      \"sigma_ar    1544.0   1.00  \\n\",\n      \"sigma        111.0   1.03  \\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"from scipy import stats\\n\",\n    \"import math\\n\",\n    \"from math import floor\\n\",\n    \"import argparse\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import os\\n\",\n    \"import csv\\n\",\n    \"import pymc as pm\\n\",\n    \"import arviz as az\\n\",\n    \"import warnings\\n\",\n    \"import pandas as pd \\n\",\n    \"\\n\",\n    \"class Simulation:\\n\",\n    \"\\n\",\n    \"    ## Fixed hyperparameters\\n\",\n    \"\\n\",\n    \"    num_timesteps = 100\\n\",\n    \"\\n\",\n    \"    initial_users = 20\\n\",\n    \"    initial_groups = 10\\n\",\n    \"    initial_communities = 5\\n\",\n    \"\\n\",\n    \"    # group and community preferences\\n\",\n    \"    alpha_group_hyperparameter = 10\\n\",\n    \"    beta_group_hyperparameter = 10 \\n\",\n    \"\\n\",\n    \"    alpha_community_hyperparameter = 10\\n\",\n    \"    beta_community_hyperparameter = 10\\n\",\n    \"\\n\",\n    \"        \\n\",\n    \"    # Initialize lists to store users and groups\\n\",\n    \"    users = []\\n\",\n    \"    groups = []\\n\",\n    \"    communities = []\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"    gis = {}\\n\",\n    \"    cis = {}\\n\",\n    \"    uis = {}\\n\",\n    \"\\n\",\n    \"    def __init__(self, user_growth_rate, interaction_threshold, new_group_rate, new_community_rate ) -> None:\\n\",\n    \"\\n\",\n    \"        self.user_growth_rate = user_growth_rate\\n\",\n    \"\\n\",\n    \"        self.interaction_threshold = interaction_threshold\\n\",\n    \"\\n\",\n    \"        self.new_group_rate = new_group_rate\\n\",\n    \"        self.new_group_join_chance = new_group_rate / 10\\n\",\n    \"\\n\",\n    \"        self.new_community_rate = new_community_rate\\n\",\n    \"        self.new_community_join_chance = new_community_rate / 10\\n\",\n    \"\\n\",\n    \"        self.same_community_interaction_ratio = new_community_rate * new_group_rate\\n\",\n    \"\\n\",\n    \"    class Community:\\n\",\n    \"        def __init__(self, simulation, group=None):\\n\",\n    \"            self.simulation = simulation \\n\",\n    \"            # Initialize a community with a list of users and groups\\n\",\n    \"            self.id = len(self.simulation.communities) + 1\\n\",\n    \"            self.groups = [group] if group else []\\n\",\n    \"            self.interactions = []\\n\",\n    \"\\n\",\n    \"    class Group:\\n\",\n    \"        def __init__(self, simulation):\\n\",\n    \"            self.simulation = simulation \\n\",\n    \"            # Initialize a group with an ID and a dictionary tgo track user interactions\\n\",\n    \"            self.id = len(self.simulation.groups) + 1\\n\",\n    \"            self.interactions = {}\\n\",\n    \"            self.community = None\\n\",\n    \"\\n\",\n    \"        def join_community(self, community):\\n\",\n    \"            community.groups.append(self)\\n\",\n    \"            self.community = community\\n\",\n    \"\\n\",\n    \"    class User:\\n\",\n    \"        def __init__(self, group_alpha, group_beta, community_alpha, community_beta):\\n\",\n    \"            # Initialize a user with ID, group memberships, interaction history, and Beta distribution preferences\\n\",\n    \"            self.id = None\\n\",\n    \"\\n\",\n    \"            self.groups = []\\n\",\n    \"            self.communities = []\\n\",\n    \"            self.interaction_history = []\\n\",\n    \"\\n\",\n    \"            self.group_preferences = stats.beta(group_alpha, group_beta)\\n\",\n    \"            self.community_preferences = stats.beta(community_alpha, community_beta)\\n\",\n    \"            self.updated_preferences = np.array([1])\\n\",\n    \"\\n\",\n    \"        def update_preferences(self):\\n\",\n    \"            # Update user's preferences based on group interactions\\n\",\n    \"            if not self.groups:\\n\",\n    \"                self.updated_preferences = np.array([1])\\n\",\n    \"                return\\n\",\n    \"            else:\\n\",\n    \"                #sort groups by number of interactions\\n\",\n    \"                self.groups.sort(key=lambda group: len(group.interactions))\\n\",\n    \"\\n\",\n    \"            total_size = sum([len(group.interactions) for group in self.groups])\\n\",\n    \"\\n\",\n    \"            # if size is 0, this must be the first iteration, return uniform\\n\",\n    \"            if total_size == 0:\\n\",\n    \"                self.ccdf = np.array([1])\\n\",\n    \"                return\\n\",\n    \"            else:\\n\",\n    \"                sizes = sorted([len(group.interactions) for group in self.groups])\\n\",\n    \"                self.ccdf = 1 - (np.cumsum(sizes) / total_size)\\n\",\n    \"\\n\",\n    \"            group_convolution = np.convolve(self.group_preferences.pdf(np.linspace(0, 1, len(self.groups))), self.ccdf , mode='same')\\n\",\n    \"\\n\",\n    \"            self.updated_preferences = np.convolve(group_convolution, self.community_preferences.pdf(np.linspace(0, 1, len(self.groups))), mode='same')\\n\",\n    \"\\n\",\n    \"            if np.isnan(self.updated_preferences).any() or np.sum(self.updated_preferences) == 0:\\n\",\n    \"                self.updated_preferences = np.array([1 / len(self.groups)] * len(self.groups))\\n\",\n    \"            else:\\n\",\n    \"                self.updated_preferences /= np.sum(self.updated_preferences)\\n\",\n    \"\\n\",\n    \"        def join_group(self, group):\\n\",\n    \"            # Add a group to the user's group list and set initial interactions to 0\\n\",\n    \"            self.groups.append(group)\\n\",\n    \"            group.interactions[self] = 0\\n\",\n    \"\\n\",\n    \"        def interact(self, group):\\n\",\n    \"            # Record an interaction with the specified group\\n\",\n    \"            group.interactions[self] = group.interactions.get(self, 0) + 1\\n\",\n    \"            self.interaction_history.append(group.id)\\n\",\n    \"\\n\",\n    \"    # Recalculate probabilities at every iteration or after any changes\\n\",\n    \"    def calculate_probabilities(self):\\n\",\n    \"        global community_relative_frequency, group_relative_frequency\\n\",\n    \"\\n\",\n    \"        community_relative_frequency = np.array([len(community.groups) for community in self.communities], dtype=float)\\n\",\n    \"        # if community_relative_frequency.sum() != 0:\\n\",\n    \"        community_relative_frequency += 1e-5  # Avoid division by zero\\n\",\n    \"        community_relative_frequency /= community_relative_frequency.sum()\\n\",\n    \"\\n\",\n    \"        group_relative_frequency = np.array([sum(group.interactions.values()) for group in self.groups], dtype=float)\\n\",\n    \"        # if group_relative_frequency.sum() != 0:\\n\",\n    \"        group_relative_frequency += 1e-5\\n\",\n    \"        group_relative_frequency /= group_relative_frequency.sum()\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"    def initialize(self):\\n\",\n    \"\\n\",\n    \"        # Initialize users\\n\",\n    \"        for i in range(self.initial_users):\\n\",\n    \"            self.users.append(\\n\",\n    \"                self.User(\\n\",\n    \"                    self.alpha_group_hyperparameter,\\n\",\n    \"                    self.beta_group_hyperparameter,\\n\",\n    \"                    self.alpha_community_hyperparameter,\\n\",\n    \"                    self.beta_community_hyperparameter,\\n\",\n    \"                )\\n\",\n    \"            )\\n\",\n    \"            self.users[-1].id = len(self.users)\\n\",\n    \"\\n\",\n    \"        # Initialize communities\\n\",\n    \"        for i in range(self.initial_communities):\\n\",\n    \"            self.communities.append(self.Community(self))\\n\",\n    \"\\n\",\n    \"        # Initialize groups\\n\",\n    \"        for i in range(self.initial_groups):\\n\",\n    \"            self.groups.append(self.Group(self))\\n\",\n    \"\\n\",\n    \"        # adding the first groups to each community so there is at least one group in each community\\n\",\n    \"        for i in range(len(self.communities)):\\n\",\n    \"            self.groups[i].join_community(self.communities[i])\\n\",\n    \"            # random chance for each user to join the first group of a new community\\n\",\n    \"            for user in self.users:\\n\",\n    \"                if np.random.random() < self.new_community_join_chance:\\n\",\n    \"                    user.join_group(self.groups[i])\\n\",\n    \"\\n\",\n    \"        # randomly adding the rest of the groups to communities\\n\",\n    \"        for group in self.groups[len(self.communities):]:\\n\",\n    \"            group.join_community(self.communities[np.random.randint(0, len(self.communities))])\\n\",\n    \"            for user in self.users:\\n\",\n    \"                if np.random.random() < self.new_group_join_chance:\\n\",\n    \"                    user.join_group(group)\\n\",\n    \"\\n\",\n    \"        # initialize dictionaries for each group, community, and user\\n\",\n    \"        for group in self.groups:\\n\",\n    \"            self.gis[group.id] = []\\n\",\n    \"        for community in self.communities:\\n\",\n    \"            self.cis[community.id] = []\\n\",\n    \"        for user in self.users:\\n\",\n    \"            self.uis[user.id] = []\\n\",\n    \"\\n\",\n    \"        \\n\",\n    \"    def run(self):\\n\",\n    \"        # main loop\\n\",\n    \"        for time in range(self.num_timesteps):\\n\",\n    \"            if time % 10 == 0:\\n\",\n    \"                print(f\\\"Time: {time}\\\")\\n\",\n    \"            # Calculate probabilities\\n\",\n    \"            self.calculate_probabilities()\\n\",\n    \"\\n\",\n    \"            # Add new users\\n\",\n    \"            new_users_count = floor(np.random.exponential(self.user_growth_rate))\\n\",\n    \"            for i in range(new_users_count):\\n\",\n    \"                self.users.append(\\n\",\n    \"                    self.User(\\n\",\n    \"                        self.alpha_group_hyperparameter,\\n\",\n    \"                        self.beta_group_hyperparameter,\\n\",\n    \"                        self.alpha_community_hyperparameter,\\n\",\n    \"                        self.beta_community_hyperparameter,\\n\",\n    \"                    )\\n\",\n    \"                )\\n\",\n    \"                self.users[-1].id = len(self.users)\\n\",\n    \"\\n\",\n    \"            # Add new groups\\n\",\n    \"            new_groups_count = floor(np.random.exponential(self.new_group_rate))\\n\",\n    \"            for i in range(new_groups_count):\\n\",\n    \"                self.groups.append(self.Group(self))\\n\",\n    \"\\n\",\n    \"                # a new community always get made on the first time step\\n\",\n    \"                if time == 0:\\n\",\n    \"                    if new_groups_count == 0:\\n\",\n    \"                        self.groups.append(self.Group(self))\\n\",\n    \"                    self.groups[-1].join_community(self.communities[-1])\\n\",\n    \"                    self.communities[-1].groups.append(self.groups[-1])\\n\",\n    \"                else:\\n\",\n    \"                    # check if the new group forms a new community\\n\",\n    \"                    if np.random.random() < self.new_community_rate:\\n\",\n    \"                        self.communities.append(self.Community(self, self.groups[-1]))\\n\",\n    \"                        self.groups[-1].community = self.communities[-1]\\n\",\n    \"                        # each user has a chance to join the new community\\n\",\n    \"                        for user in self.users:\\n\",\n    \"                            if np.random.random() < self.new_community_join_chance:\\n\",\n    \"                                user.join_group(self.groups[-1])\\n\",\n    \"                        # users[np.random.randint(0, len(users))].join_group(groups[-1])\\n\",\n    \"                    else:\\n\",\n    \"                        # join a random community\\n\",\n    \"                        self.groups[-1].join_community(self.communities[np.random.randint(0, len(self.communities))])\\n\",\n    \"\\n\",\n    \"            # Updating dictionaries with new groups, communities, and users\\n\",\n    \"            # and setting their initial values to 0\\n\",\n    \"            for group in self.groups:\\n\",\n    \"                if group.id not in self.gis:\\n\",\n    \"                    self.gis[group.id] = [0]\\n\",\n    \"                self.gis[group.id].append(0)\\n\",\n    \"            for community in self.communities:\\n\",\n    \"                if community.id not in self.cis:\\n\",\n    \"                    self.cis[community.id] = [0]\\n\",\n    \"                self.cis[community.id].append(0)\\n\",\n    \"            for user in self.users:\\n\",\n    \"                if user.id not in self.uis:\\n\",\n    \"                    self.uis[user.id] = [0]\\n\",\n    \"                self.uis[user.id].append(0)\\n\",\n    \"\\n\",\n    \"            # Add new users to groups\\n\",\n    \"            for user in self.users:\\n\",\n    \"                self.calculate_probabilities()\\n\",\n    \"                # if there are groups for the user to join that they aren't in\\n\",\n    \"                if len(user.groups) < len(self.groups):\\n\",\n    \"                    # join a group\\n\",\n    \"                    if np.random.random() < self.new_group_join_chance:\\n\",\n    \"                        user.join_group(self.groups[np.random.choice(len(self.groups), p=group_relative_frequency)])\\n\",\n    \"\\n\",\n    \"            # Interact with groups\\n\",\n    \"            for user in self.users:\\n\",\n    \"                user.update_preferences()\\n\",\n    \"                interacted_groups = []\\n\",\n    \"                if np.random.uniform() < self.interaction_threshold and user.groups:\\n\",\n    \"                    # print(user.updated_preferences)\\n\",\n    \"                    group = np.random.choice(user.groups, p=user.updated_preferences)\\n\",\n    \"                    user.interact(group)\\n\",\n    \"                    self.gis[group.id][-1] += 1\\n\",\n    \"                    self.cis[group.community.id][-1] += 1\\n\",\n    \"                    self.uis[user.id][-1] += 1\\n\",\n    \"\\n\",\n    \"                    # potential bonus interactions within another group in the same community\\n\",\n    \"                    if group.community:\\n\",\n    \"                        while True:\\n\",\n    \"                            if np.random.uniform() < self.same_community_interaction_ratio:\\n\",\n    \"                                community = group.community                    \\n\",\n    \"                                group = np.random.choice(community.groups)\\n\",\n    \"                                user.interact(group)\\n\",\n    \"                                self.gis[group.id][-1] += 1\\n\",\n    \"                                self.cis[group.community.id][-1] += 1\\n\",\n    \"                                self.uis[user.id][-1] += 1\\n\",\n    \"                            else:\\n\",\n    \"                                break\\n\",\n    \"\\n\",\n    \"            # Update user preferences\\n\",\n    \"            for user in self.users:\\n\",\n    \"                if user.groups:\\n\",\n    \"                    user.update_preferences()\\n\",\n    \"                    if user.id == 0:\\n\",\n    \"                        print(user.updated_preferences)\\n\",\n    \"                        print(user.group_preferences.pdf(np.linspace(0, 1, len(user.groups))))\\n\",\n    \"                else:\\n\",\n    \"                    user.updated_preferences = np.array([1])\\n\",\n    \"\\n\",\n    \"    def plot(self, sim_number):        \\n\",\n    \"        directory_name = f\\\"{self.user_growth_rate}_{self.interaction_threshold}_{self.new_group_rate}_{self.new_community_rate}/{sim_number}\\\"\\n\",\n    \"        os.makedirs(directory_name, exist_ok=True)\\n\",\n    \"\\n\",\n    \"        c_sum = []\\n\",\n    \"        c_sum_labels = []\\n\",\n    \"        for i in range(len(self.communities)):\\n\",\n    \"            temp_sum = [0] * self.num_timesteps\\n\",\n    \"            c_vals = np.cumsum(self.cis[i+1])\\n\",\n    \"            # add the values starting from the back\\n\",\n    \"            for j, val in enumerate(reversed(c_vals)):\\n\",\n    \"                temp_sum[-1-j] = val\\n\",\n    \"            c_sum.append(temp_sum)\\n\",\n    \"            c_sum_labels.append(list(self.cis.keys())[i])\\n\",\n    \"\\n\",\n    \"        # print the final value for each community\\n\",\n    \"        for c in c_sum_labels[:5]:\\n\",\n    \"            print(c, c_sum[c_sum_labels.index(c)][-1])\\n\",\n    \"            \\n\",\n    \"        # finding the labels for the 5 largest communities\\n\",\n    \"        top_5 = []\\n\",\n    \"        top_5_labels = []\\n\",\n    \"        for i in range(5):\\n\",\n    \"            max_val = 0\\n\",\n    \"            max_index = 0\\n\",\n    \"            for j in range(len(c_sum)):\\n\",\n    \"                if c_sum[j][-1] > max_val and c_sum_labels[j] not in top_5_labels:\\n\",\n    \"                    max_val = c_sum[j][-1]\\n\",\n    \"                    max_index = j\\n\",\n    \"            top_5.append(c_sum[max_index])\\n\",\n    \"            top_5_labels.append(c_sum_labels[max_index])\\n\",\n    \"\\n\",\n    \"        for i in range(len(c_sum)):\\n\",\n    \"            if c_sum_labels[i] in top_5_labels:\\n\",\n    \"                plt.plot(c_sum[i][:len(c_sum[i])], label=f\\\"C{i+1}\\\")\\n\",\n    \"            else:\\n\",\n    \"                plt.plot(c_sum[i][:len(c_sum[i])], label=None)\\n\",\n    \"\\n\",\n    \"        plt.legend(loc=\\\"upper left\\\")\\n\",\n    \"        plt.xlabel(\\\"Time\\\")\\n\",\n    \"        plt.ylabel(\\\"Cumulative Interactions\\\")\\n\",\n    \"        plt.yscale(\\\"log\\\")\\n\",\n    \"        plt.title(\\\"Cumulative Interactions of Each Community Over Time\\\")\\n\",\n    \"        plt.savefig(f\\\"{directory_name}/community_interaction_growth.png\\\")\\n\",\n    \"        plt.close()\\n\",\n    \"        \\n\",\n    \"        # Scatter plot for final amount of interactions for each community\\n\",\n    \"        c_sum_final = []\\n\",\n    \"        c_sum_final_labels = []\\n\",\n    \"        for i in range(len(self.communities)):\\n\",\n    \"            c_sum_final.append(c_sum[i][-1])\\n\",\n    \"            c_sum_final_labels.append(list(self.cis.keys())[i])\\n\",\n    \"\\n\",\n    \"        plt.scatter(c_sum_final_labels, c_sum_final)\\n\",\n    \"        plt.xlabel(\\\"Community\\\")\\n\",\n    \"        plt.ylabel(\\\"Final Cumulative Interactions\\\")\\n\",\n    \"        plt.title(\\\"Final Cumulative Interactions of Each Community\\\")\\n\",\n    \"        plt.savefig(f\\\"{directory_name}/final_community_interactions.png\\\")\\n\",\n    \"        plt.close()\\n\",\n    \"        \\n\",\n    \"\\n\",\n    \"        g_sum = []\\n\",\n    \"        g_sum_labels = []\\n\",\n    \"        for i in range(1, len(self.groups)):\\n\",\n    \"            temp_sum = [0] * self.num_timesteps\\n\",\n    \"            g_vals = np.cumsum(self.gis[i])\\n\",\n    \"            # add the values starting from the back\\n\",\n    \"            for j, val in enumerate(reversed(g_vals)):\\n\",\n    \"                try:\\n\",\n    \"                    temp_sum[j] = val\\n\",\n    \"                except:\\n\",\n    \"                    pass\\n\",\n    \"\\n\",\n    \"            temp_sum = temp_sum[::-1]\\n\",\n    \"            g_sum.append(temp_sum)\\n\",\n    \"            g_sum_labels.append(list(self.gis.keys())[i])\\n\",\n    \"\\n\",\n    \"        # print the final value for each group\\n\",\n    \"        for g in g_sum_labels[:5]:\\n\",\n    \"            print(g, g_sum[g_sum_labels.index(g)][-1])\\n\",\n    \"\\n\",\n    \"        # finding the labels for the 5 largest groups\\n\",\n    \"        top_5 = []\\n\",\n    \"        top_5_labels = []\\n\",\n    \"        for i in range(5):\\n\",\n    \"            max_val = 0\\n\",\n    \"            max_index = 0\\n\",\n    \"            for j in range(len(g_sum)):\\n\",\n    \"                if g_sum[j][-1] > max_val and g_sum_labels[j] not in top_5_labels:\\n\",\n    \"                    max_val = g_sum[j][-1]\\n\",\n    \"                    max_index = j\\n\",\n    \"            top_5.append(g_sum[max_index])\\n\",\n    \"            top_5_labels.append(g_sum_labels[max_index])\\n\",\n    \"\\n\",\n    \"        for i in range(len(g_sum)):\\n\",\n    \"            if g_sum_labels[i] in top_5_labels:\\n\",\n    \"                plt.plot(g_sum[i], label=f\\\"G{i+1}\\\")\\n\",\n    \"            else:\\n\",\n    \"                plt.plot(g_sum[i], label=None)\\n\",\n    \"\\n\",\n    \"        plt.legend(loc=\\\"upper left\\\")\\n\",\n    \"        plt.xlabel(\\\"Time\\\")\\n\",\n    \"        plt.ylabel(\\\"Cumulative Interactions\\\")\\n\",\n    \"        # plt.yscale(\\\"log\\\")\\n\",\n    \"        plt.ylim(bottom=1)\\n\",\n    \"        plt.title(\\\"Cumulative Interactions of Each Group Over Time\\\")\\n\",\n    \"        plt.savefig(f\\\"{directory_name}/group_interaction_growth.png\\\")\\n\",\n    \"        plt.close()\\n\",\n    \"\\n\",\n    \"        # Scatter plot for final amount of interactions for each group\\n\",\n    \"        g_sum_final = []\\n\",\n    \"        g_sum_final_labels = []\\n\",\n    \"        for i in range(len(g_sum)):\\n\",\n    \"            g_sum_final.append(g_sum[i][-1])\\n\",\n    \"            g_sum_final_labels.append(list(self.gis.keys())[i])\\n\",\n    \"\\n\",\n    \"        plt.scatter(g_sum_final_labels, g_sum_final)\\n\",\n    \"        plt.xlabel(\\\"Group\\\")\\n\",\n    \"        plt.ylabel(\\\"Final Cumulative Interactions\\\")\\n\",\n    \"        plt.title(\\\"Final Cumulative Interactions of Each Group\\\")\\n\",\n    \"        plt.savefig(f\\\"{directory_name}/final_group_interactions.png\\\")\\n\",\n    \"        plt.close()\\n\",\n    \"\\n\",\n    \"        for u in self.uis:\\n\",\n    \"            self.uis[u] = self.uis[u][:self.num_timesteps]\\n\",\n    \"\\n\",\n    \"        # plotting total amount of interactions for each user\\n\",\n    \"        u_sum = []\\n\",\n    \"        u_sum_labels = []\\n\",\n    \"        for i in range(1, len(self.users)):\\n\",\n    \"            temp_sum = [0] * self.num_timesteps\\n\",\n    \"            u_vals = np.cumsum(self.uis[i])\\n\",\n    \"            # add the values starting from the back\\n\",\n    \"            for j, val in enumerate(reversed(u_vals)):\\n\",\n    \"                temp_sum[j] = val\\n\",\n    \"\\n\",\n    \"            temp_sum = temp_sum[::-1]\\n\",\n    \"            u_sum.append(temp_sum)\\n\",\n    \"            u_sum_labels.append(list(self.uis.keys())[i])\\n\",\n    \"\\n\",\n    \"        # print the final value for each user\\n\",\n    \"        for u in u_sum_labels[:5]:\\n\",\n    \"            print(u, u_sum[u_sum_labels.index(u)][-1])\\n\",\n    \"\\n\",\n    \"        # finding the labels for the 5 largest users\\n\",\n    \"        top_5 = []\\n\",\n    \"        top_5_labels = []\\n\",\n    \"\\n\",\n    \"        for i in range(5):\\n\",\n    \"            max_val = 0\\n\",\n    \"            max_index = 0\\n\",\n    \"            for j in range(len(u_sum)):\\n\",\n    \"                if u_sum[j][-1] > max_val and u_sum_labels[j] not in top_5_labels:\\n\",\n    \"                    max_val = u_sum[j][-1]\\n\",\n    \"                    max_index = j\\n\",\n    \"            top_5.append(u_sum[max_index])\\n\",\n    \"            top_5_labels.append(u_sum_labels[max_index])\\n\",\n    \"\\n\",\n    \"        # Scatter plot for final amount of interactions for each user\\n\",\n    \"        u_sum_final = []\\n\",\n    \"        u_sum_final_labels = []\\n\",\n    \"        for i in range(len(u_sum)):\\n\",\n    \"            u_sum_final.append(u_sum[i][-1])\\n\",\n    \"            u_sum_final_labels.append(list(self.uis.keys())[i])\\n\",\n    \"\\n\",\n    \"        plt.scatter(u_sum_final_labels, u_sum_final)\\n\",\n    \"        plt.xlabel(\\\"User\\\")\\n\",\n    \"        plt.ylabel(\\\"Final Cumulative Interactions\\\")\\n\",\n    \"        plt.title(\\\"Cumulative Interactions of Each User\\\")\\n\",\n    \"        plt.savefig(f\\\"{directory_name}/final_user_interactions.png\\\")\\n\",\n    \"        plt.close()\\n\",\n    \"\\n\",\n    \"    \\n\",\n    \"    def write_data(self, sim_number):\\n\",\n    \"        directory_name = f\\\"{self.user_growth_rate}_{self.interaction_threshold}_{self.new_group_rate}_{self.new_community_rate}/{sim_number}\\\"\\n\",\n    \"        os.makedirs(directory_name, exist_ok=True)\\n\",\n    \"\\n\",\n    \"        # Write User Interactions to CSV\\n\",\n    \"        with open(f\\\"{directory_name}/user_interactions.csv\\\", 'w', newline='') as file:\\n\",\n    \"            writer = csv.writer(file)\\n\",\n    \"            for row in self.uis:\\n\",\n    \"                writer.writerow([row] + self.uis[row])\\n\",\n    \"\\n\",\n    \"            file.close()\\n\",\n    \"        \\n\",\n    \"        # Write Group Interactions to CSV\\n\",\n    \"        with open(f\\\"{directory_name}/group_interactions.csv\\\", 'w', newline='') as file:\\n\",\n    \"            writer = csv.writer(file)\\n\",\n    \"            for row in self.gis:\\n\",\n    \"                writer.writerow([row] + self.gis[row])\\n\",\n    \"\\n\",\n    \"            file.close()\\n\",\n    \"\\n\",\n    \"        # Write Community Interactions to CSV\\n\",\n    \"        with open(f\\\"{directory_name}/community_interactions.csv\\\", 'w', newline='') as file:\\n\",\n    \"            writer = csv.writer(file)\\n\",\n    \"            for row in self.cis:\\n\",\n    \"                writer.writerow([row] + self.cis[row])\\n\",\n    \"\\n\",\n    \"            file.close()\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"        with open(f\\\"{directory_name}/simulation_data.csv\\\", 'w') as file:\\n\",\n    \"            writer = csv.writer(file)\\n\",\n    \"            writer.writerow(['num_users', 'num_groups', 'num_communities', 'num_interactions'])\\n\",\n    \"            writer.writerow([len(self.users), len(self.groups), len(self.communities), sum([len(group.interactions) for group in self.groups])])\\n\",\n    \"\\n\",\n    \"            file.close()\\n\",\n    \"\\n\",\n    \"        print(\\\"Data written to CSV files.\\\")\\n\",\n    \"\\n\",\n    \"    def community_regression_model(self):\\n\",\n    \"\\n\",\n    \"        y = []\\n\",\n    \"        X = []\\n\",\n    \"        c_sum = 0\\n\",\n    \"\\n\",\n    \"        for community in range(len(self.communities)):\\n\",\n    \"            df = pd.DataFrame(self.cis[community + 1]) - pd.DataFrame(self.cis[community + 1]).shift(1)\\n\",\n    \"            df.fillna(0, inplace=True)\\n\",\n    \"            X.append(df)\\n\",\n    \"            c = pd.DataFrame(self.cis[community + 1])\\n\",\n    \"            c_sum += c.sum()            \\n\",\n    \"\\n\",\n    \"        # get rid of third dimension of X\\n\",\n    \"        X = np.array(X)\\n\",\n    \"        X = X.reshape(X.shape[0], X.shape[1])\\n\",\n    \"\\n\",\n    \"            \\n\",\n    \"        X = pd.DataFrame(X)\\n\",\n    \"\\n\",\n    \"        y = X.iloc[:,-1]\\n\",\n    \"        y.fillna(0, inplace=True)\\n\",\n    \"\\n\",\n    \"        X = X.iloc[:,:-1]\\n\",\n    \"        X.fillna(0, inplace=True)\\n\",\n    \"\\n\",\n    \"        y = y.to_numpy()\\n\",\n    \"\\n\",\n    \"        model = pm.Model()\\n\",\n    \"\\n\",\n    \"        with model:\\n\",\n    \"            try:\\n\",\n    \"                # Data\\n\",\n    \"                group_index = pm.Data('group_index', np.arange(len(self.communities)), dims='community')\\n\",\n    \"                X_data = pm.Data('X_data', X.T)\\n\",\n    \"                y_data = pm.Data('y_data', y)\\n\",\n    \"\\n\",\n    \"                # Priors\\n\",\n    \"                rho = pm.Normal('phi', mu=0, sigma=c_sum/len(self.communities), dims='community')\\n\",\n    \"                sigma_ar = pm.Exponential('sigma_ar', lam=1)\\n\",\n    \"\\n\",\n    \"                # AR Model\\n\",\n    \"                ar = pm.AR('ar', rho=rho, sigma=sigma_ar, dims='community')\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"                # Likelihood\\n\",\n    \"                sigma = pm.Exponential('sigma', lam=1)\\n\",\n    \"                y_obs = pm.Normal('y_obs', mu=ar, sigma=sigma, observed=y_data, dims='community')\\n\",\n    \"\\n\",\n    \"                # Sampling\\n\",\n    \"                trace = pm.sample(tune=1000, draws=1000)\\n\",\n    \"                posterior_predictive = pm.sample_posterior_predictive(trace)\\n\",\n    \"                prior_predictive = pm.sample_prior_predictive()\\n\",\n    \"            \\n\",\n    \"            except pm.exceptions.SamplingError:\\n\",\n    \"                warnings.warn('SamplingError: Skipping this group')\\n\",\n    \"\\n\",\n    \"        prior = prior_predictive['prior_predictive']['y_obs']\\n\",\n    \"\\n\",\n    \"        cs = [[] for _ in range(len(self.communities))]\\n\",\n    \"\\n\",\n    \"        for chain in range(prior.shape[0]):\\n\",\n    \"            for draw in range(prior.shape[1]):\\n\",\n    \"                for c in range(prior.shape[2]):\\n\",\n    \"                    cs[c].append(prior[chain,draw,c])\\n\",\n    \"\\n\",\n    \"        for c in cs:\\n\",\n    \"            plt.hist(c)\\n\",\n    \"        plt.show()\\n\",\n    \"\\n\",\n    \"        pred = posterior_predictive['posterior_predictive']['y_obs'].to_numpy()\\n\",\n    \"\\n\",\n    \"        shape = pred.shape\\n\",\n    \"        groups1 = shape[2]\\n\",\n    \"\\n\",\n    \"        # Initialize list of lists for each community\\n\",\n    \"        preds = [[] for _ in range(groups1)]\\n\",\n    \"\\n\",\n    \"        for i in range(shape[0]):\\n\",\n    \"            for j in range(shape[1]):\\n\",\n    \"                for k in range(groups1):\\n\",\n    \"                    preds[k].append(pred[i, j, k])\\n\",\n    \"\\n\",\n    \"        for k in range(groups1):\\n\",\n    \"\\n\",\n    \"            plt.hist(preds[k], bins=50, alpha=0.5)\\n\",\n    \"            plt.axvline(y[k], color='k', linestyle='dashed', linewidth=1)\\n\",\n    \"            plt.title('Community Interaction Predictions')\\n\",\n    \"            plt.xlabel(\\\"Number of interactions\\\")\\n\",\n    \"            plt.ylabel(\\\"Frequency\\\")\\n\",\n    \"        plt.show()\\n\",\n    \"            \\n\",\n    \"        print(az.summary(trace))\\n\",\n    \"\\n\",\n    \"    \\n\",\n    \"    def group_regression_model(self):\\n\",\n    \"\\n\",\n    \"        y = []\\n\",\n    \"        X = []\\n\",\n    \"        g_sum = 0\\n\",\n    \"\\n\",\n    \"        for group in range(len(self.groups)):\\n\",\n    \"            df = pd.DataFrame(self.gis[group + 1]) - pd.DataFrame(self.gis[group + 1]).shift(1)\\n\",\n    \"            df.fillna(0, inplace=True)\\n\",\n    \"            X.append(df)\\n\",\n    \"            g = pd.DataFrame(self.gis[group + 1])\\n\",\n    \"            g_sum += g.sum()            \\n\",\n    \"\\n\",\n    \"        # get rid of third dimension of X\\n\",\n    \"        X = np.array(X)\\n\",\n    \"        X = X.reshape(X.shape[0], X.shape[1])\\n\",\n    \"\\n\",\n    \"            \\n\",\n    \"        X = pd.DataFrame(X)\\n\",\n    \"\\n\",\n    \"        y = X.iloc[:,-1]\\n\",\n    \"        y.fillna(0, inplace=True)\\n\",\n    \"\\n\",\n    \"        X = X.iloc[:,:-1]\\n\",\n    \"        X.fillna(0, inplace=True)\\n\",\n    \"\\n\",\n    \"        y = y.to_numpy()\\n\",\n    \"\\n\",\n    \"        model = pm.Model()\\n\",\n    \"\\n\",\n    \"        with model:\\n\",\n    \"            try:\\n\",\n    \"                # Data\\n\",\n    \"                group_index = pm.Data('group_index', np.arange(len(self.groups)), dims='group')\\n\",\n    \"                X_data = pm.Data('X_data', X.T)\\n\",\n    \"                y_data = pm.Data('y_data', y)\\n\",\n    \"\\n\",\n    \"                # Priors\\n\",\n    \"                rho = pm.Normal('phi', mu=0, sigma=g_sum/len(self.communities), dims='group')\\n\",\n    \"                sigma_ar = pm.Exponential('sigma_ar', lam=1)\\n\",\n    \"\\n\",\n    \"                # AR Model\\n\",\n    \"                ar = pm.AR('ar', rho=rho, sigma=sigma_ar, dims='group')\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"                # Likelihood\\n\",\n    \"                sigma = pm.Exponential('sigma', lam=1)\\n\",\n    \"                y_obs = pm.Normal('y_obs', mu=ar, sigma=sigma, observed=y_data, dims='group')\\n\",\n    \"\\n\",\n    \"                # Sampling\\n\",\n    \"                trace = pm.sample(tune=1000, draws=1000)\\n\",\n    \"                posterior_predictive = pm.sample_posterior_predictive(trace)\\n\",\n    \"                prior_predictive = pm.sample_prior_predictive()\\n\",\n    \"            \\n\",\n    \"            except pm.exceptions.SamplingError:\\n\",\n    \"                warnings.warn('SamplingError: Skipping this group')\\n\",\n    \"\\n\",\n    \"        prior = prior_predictive['prior_predictive']['y_obs']\\n\",\n    \"\\n\",\n    \"        gs = [[] for _ in range(len(self.groups))]\\n\",\n    \"\\n\",\n    \"        for chain in range(prior.shape[0]):\\n\",\n    \"            for draw in range(prior.shape[1]):\\n\",\n    \"                for g in range(prior.shape[2]):\\n\",\n    \"                    gs[g].append(prior[chain,draw,g])\\n\",\n    \"\\n\",\n    \"        for g in gs:\\n\",\n    \"            plt.hist(g)\\n\",\n    \"        plt.show()\\n\",\n    \"\\n\",\n    \"        pred = posterior_predictive['posterior_predictive']['y_obs'].to_numpy()\\n\",\n    \"\\n\",\n    \"        shape = pred.shape\\n\",\n    \"        groups1 = shape[2]\\n\",\n    \"\\n\",\n    \"        # Initialize list of lists for each community\\n\",\n    \"        preds = [[] for _ in range(groups1)]\\n\",\n    \"\\n\",\n    \"        for i in range(shape[0]):\\n\",\n    \"            for j in range(shape[1]):\\n\",\n    \"                for k in range(groups1):\\n\",\n    \"                    preds[k].append(pred[i, j, k])\\n\",\n    \"\\n\",\n    \"        for k in range(groups1):\\n\",\n    \"\\n\",\n    \"            plt.hist(preds[k], bins=50, alpha=0.5)\\n\",\n    \"            plt.axvline(y[k], color='k', linestyle='dashed', linewidth=1)\\n\",\n    \"            plt.title('Group Interaction Predictions')\\n\",\n    \"            plt.xlabel(\\\"Number of interactions\\\")\\n\",\n    \"            plt.ylabel(\\\"Frequency\\\")\\n\",\n    \"        plt.show()\\n\",\n    \"            \\n\",\n    \"        print(az.summary(trace))\\n\",\n    \"        \\n\",\n    \"        \\n\",\n    \"sim = Simulation(1, 0.5, 0.05, 0.01)\\n\",\n    \"sim.initialize()\\n\",\n    \"sim.run()\\n\",\n    \"sim.community_regression_model()\\n\",\n    \"sim.group_regression_model()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"/usr/local/lib/python3.11/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\\n\",\n      \"  warnings.warn(\\n\",\n      \"Multiprocess sampling (4 chains in 4 jobs)\\n\",\n      \"CompoundStep\\n\",\n      \">CompoundStep\\n\",\n      \">>Metropolis: [alpha]\\n\",\n      \">>Metropolis: [beta]\\n\",\n      \">NUTS: [beta_mu, beta_sd]\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\",\n      \"WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"\\n\",\n       \"<style>\\n\",\n       \"    /* Turns off some styling */\\n\",\n       \"    progress {\\n\",\n       \"        /* gets rid of default border in Firefox and Opera. */\\n\",\n       \"        border: none;\\n\",\n       \"        /* Needs to be in here for Safari polyfill so background images work as expected. */\\n\",\n       \"        background-size: auto;\\n\",\n       \"    }\\n\",\n       \"    progress:not([value]), progress:not([value])::-webkit-progress-bar {\\n\",\n       \"        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\\n\",\n       \"    }\\n\",\n       \"    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\\n\",\n       \"        background: #F44336;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\"\n      ],\n      \"text/plain\": [\n       \"<IPython.core.display.HTML object>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"\\n\",\n       \"    <div>\\n\",\n       \"      <progress value='3596' class='' max='40000' style='width:300px; height:20px; vertical-align: middle;'></progress>\\n\",\n       \"      8.99% [3596/40000 00:49&lt;08:22 Sampling 4 chains, 0 divergences]\\n\",\n       \"    </div>\\n\",\n       \"    \"\n      ],\n      \"text/plain\": [\n       \"<IPython.core.display.HTML object>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"ename\": \"ValueError\",\n     \"evalue\": \"Not enough samples to build a trace.\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[0;31mValueError\\u001b[0m                                Traceback (most recent call last)\",\n      \"\\u001b[1;32m/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb Cell 6\\u001b[0m line \\u001b[0;36m6\\n\\u001b[1;32m     <a href='vscode-notebook-cell:/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb#W1sZmlsZQ%3D%3D?line=59'>60</a>\\u001b[0m y_obs \\u001b[39m=\\u001b[39m pm\\u001b[39m.\\u001b[39mCategorical(\\u001b[39m'\\u001b[39m\\u001b[39my_obs\\u001b[39m\\u001b[39m'\\u001b[39m, p\\u001b[39m=\\u001b[39mp, observed\\u001b[39m=\\u001b[39my_data, dims\\u001b[39m=\\u001b[39m\\u001b[39m'\\u001b[39m\\u001b[39muser\\u001b[39m\\u001b[39m'\\u001b[39m)\\n\\u001b[1;32m     <a href='vscode-notebook-cell:/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb#W1sZmlsZQ%3D%3D?line=61'>62</a>\\u001b[0m \\u001b[39m# Sampling\\u001b[39;00m\\n\\u001b[0;32m---> <a href='vscode-notebook-cell:/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb#W1sZmlsZQ%3D%3D?line=62'>63</a>\\u001b[0m trace \\u001b[39m=\\u001b[39m pm\\u001b[39m.\\u001b[39;49msample(tune\\u001b[39m=\\u001b[39;49m\\u001b[39m5000\\u001b[39;49m, draws\\u001b[39m=\\u001b[39;49m\\u001b[39m5000\\u001b[39;49m)\\n\\u001b[1;32m     <a href='vscode-notebook-cell:/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb#W1sZmlsZQ%3D%3D?line=63'>64</a>\\u001b[0m posterior_predictive \\u001b[39m=\\u001b[39m pm\\u001b[39m.\\u001b[39msample_posterior_predictive(trace)\\n\\u001b[1;32m     <a href='vscode-notebook-cell:/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb#W1sZmlsZQ%3D%3D?line=64'>65</a>\\u001b[0m prior_predictive \\u001b[39m=\\u001b[39m pm\\u001b[39m.\\u001b[39msample_prior_predictive()\\n\",\n      \"File \\u001b[0;32m/usr/local/lib/python3.11/site-packages/pymc/sampling/mcmc.py:827\\u001b[0m, in \\u001b[0;36msample\\u001b[0;34m(draws, tune, chains, cores, random_seed, progressbar, step, nuts_sampler, initvals, init, jitter_max_retries, n_init, trace, discard_tuned_samples, compute_convergence_checks, keep_warning_stat, return_inferencedata, idata_kwargs, nuts_sampler_kwargs, callback, mp_ctx, model, **kwargs)\\u001b[0m\\n\\u001b[1;32m    823\\u001b[0m t_sampling \\u001b[39m=\\u001b[39m time\\u001b[39m.\\u001b[39mtime() \\u001b[39m-\\u001b[39m t_start\\n\\u001b[1;32m    825\\u001b[0m \\u001b[39m# Packaging, validating and returning the result was extracted\\u001b[39;00m\\n\\u001b[1;32m    826\\u001b[0m \\u001b[39m# into a function to make it easier to test and refactor.\\u001b[39;00m\\n\\u001b[0;32m--> 827\\u001b[0m \\u001b[39mreturn\\u001b[39;00m _sample_return(\\n\\u001b[1;32m    828\\u001b[0m     run\\u001b[39m=\\u001b[39;49mrun,\\n\\u001b[1;32m    829\\u001b[0m     traces\\u001b[39m=\\u001b[39;49mtraces,\\n\\u001b[1;32m    830\\u001b[0m     tune\\u001b[39m=\\u001b[39;49mtune,\\n\\u001b[1;32m    831\\u001b[0m     t_sampling\\u001b[39m=\\u001b[39;49mt_sampling,\\n\\u001b[1;32m    832\\u001b[0m     discard_tuned_samples\\u001b[39m=\\u001b[39;49mdiscard_tuned_samples,\\n\\u001b[1;32m    833\\u001b[0m     compute_convergence_checks\\u001b[39m=\\u001b[39;49mcompute_convergence_checks,\\n\\u001b[1;32m    834\\u001b[0m     return_inferencedata\\u001b[39m=\\u001b[39;49mreturn_inferencedata,\\n\\u001b[1;32m    835\\u001b[0m     keep_warning_stat\\u001b[39m=\\u001b[39;49mkeep_warning_stat,\\n\\u001b[1;32m    836\\u001b[0m     idata_kwargs\\u001b[39m=\\u001b[39;49midata_kwargs \\u001b[39mor\\u001b[39;49;00m {},\\n\\u001b[1;32m    837\\u001b[0m     model\\u001b[39m=\\u001b[39;49mmodel,\\n\\u001b[1;32m    838\\u001b[0m )\\n\",\n      \"File \\u001b[0;32m/usr/local/lib/python3.11/site-packages/pymc/sampling/mcmc.py:858\\u001b[0m, in \\u001b[0;36m_sample_return\\u001b[0;34m(run, traces, tune, t_sampling, discard_tuned_samples, compute_convergence_checks, return_inferencedata, keep_warning_stat, idata_kwargs, model)\\u001b[0m\\n\\u001b[1;32m    856\\u001b[0m \\u001b[39m# Pick and slice chains to keep the maximum number of samples\\u001b[39;00m\\n\\u001b[1;32m    857\\u001b[0m \\u001b[39mif\\u001b[39;00m discard_tuned_samples:\\n\\u001b[0;32m--> 858\\u001b[0m     traces, length \\u001b[39m=\\u001b[39m _choose_chains(traces, tune)\\n\\u001b[1;32m    859\\u001b[0m \\u001b[39melse\\u001b[39;00m:\\n\\u001b[1;32m    860\\u001b[0m     traces, length \\u001b[39m=\\u001b[39m _choose_chains(traces, \\u001b[39m0\\u001b[39m)\\n\",\n      \"File \\u001b[0;32m/usr/local/lib/python3.11/site-packages/pymc/backends/base.py:601\\u001b[0m, in \\u001b[0;36m_choose_chains\\u001b[0;34m(traces, tune)\\u001b[0m\\n\\u001b[1;32m    599\\u001b[0m lengths \\u001b[39m=\\u001b[39m [\\u001b[39mmax\\u001b[39m(\\u001b[39m0\\u001b[39m, \\u001b[39mlen\\u001b[39m(trace) \\u001b[39m-\\u001b[39m tune) \\u001b[39mfor\\u001b[39;00m trace \\u001b[39min\\u001b[39;00m traces]\\n\\u001b[1;32m    600\\u001b[0m \\u001b[39mif\\u001b[39;00m \\u001b[39mnot\\u001b[39;00m \\u001b[39msum\\u001b[39m(lengths):\\n\\u001b[0;32m--> 601\\u001b[0m     \\u001b[39mraise\\u001b[39;00m \\u001b[39mValueError\\u001b[39;00m(\\u001b[39m\\\"\\u001b[39m\\u001b[39mNot enough samples to build a trace.\\u001b[39m\\u001b[39m\\\"\\u001b[39m)\\n\\u001b[1;32m    603\\u001b[0m idxs \\u001b[39m=\\u001b[39m np\\u001b[39m.\\u001b[39margsort(lengths)\\n\\u001b[1;32m    604\\u001b[0m l_sort \\u001b[39m=\\u001b[39m np\\u001b[39m.\\u001b[39marray(lengths)[idxs]\\n\",\n      \"\\u001b[0;31mValueError\\u001b[0m: Not enough samples to build a trace.\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"\\n\",\n    \"# multinomial logit model for group interactions\\n\",\n    \"num_groups = len(groups)\\n\",\n    \"y = []\\n\",\n    \"X = []\\n\",\n    \"\\n\",\n    \"for user in users:\\n\",\n    \"    y.append(user.interaction_history[-1])\\n\",\n    \"    # every interaction but the last one\\n\",\n    \"    X.append(np.bincount(user.interaction_history[:-1], minlength=num_groups))\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"X = pd.DataFrame(X)\\n\",\n    \"X.fillna(0, inplace=True)\\n\",\n    \"\\n\",\n    \"y = pd.DataFrame(y)\\n\",\n    \"y = y.iloc[:,0]\\n\",\n    \"\\n\",\n    \"# drop first column if sum is 0\\n\",\n    \"if X.iloc[:,0].sum() == 0:\\n\",\n    \"    X = X.iloc[:,1:]\\n\",\n    \"    if num_groups != X.shape[1]:\\n\",\n    \"        num_groups -= (X.shape[1] - num_groups)\\n\",\n    \"\\n\",\n    \"for row in range(len(X)):\\n\",\n    \"    X.iloc[row] = X.iloc[row] / X.iloc[row].sum()\\n\",\n    \"\\n\",\n    \"X.fillna(0, inplace=True)\\n\",\n    \"X = (X - X.mean()) / X.std()\\n\",\n    \"X.fillna(0, inplace=True)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"model = pm.Model()\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"with model:\\n\",\n    \"    try:\\n\",\n    \"\\n\",\n    \"        indices = pm.Data('index', list(range(len(X))), dims='user')\\n\",\n    \"        # Define your data within the model\\n\",\n    \"        X_data = pm.Data('X_data', X)\\n\",\n    \"        y_data = pm.Data('y_data', y)\\n\",\n    \"\\n\",\n    \"        # Model parameters\\n\",\n    \"        \\n\",\n    \"        alpha = pm.Exponential('alpha', lam=np.max(group_relative_frequency), shape=num_groups)\\n\",\n    \"\\n\",\n    \"        beta_mu = pm.Normal('beta_mu', mu=1, sigma=10, shape=num_groups)\\n\",\n    \"        beta_sd = pm.TruncatedNormal('beta_sd', lower=0, mu=5, sigma=2.5, shape=num_groups)\\n\",\n    \"\\n\",\n    \"        beta = pm.Normal('beta', mu=beta_mu, sigma=beta_sd, shape=(num_groups, num_groups))\\n\",\n    \"\\n\",\n    \"        # Computing mu\\n\",\n    \"        mu = alpha + pm.math.dot(X_data, beta) \\n\",\n    \"\\n\",\n    \"        # A numerically stable softmax\\n\",\n    \"        mu_max = pm.math.max(mu, axis=1, keepdims=True)\\n\",\n    \"        p = pm.Deterministic('p', pm.math.exp(mu - mu_max) / pm.math.sum(pm.math.exp(mu - mu_max), axis=1, keepdims=True))\\n\",\n    \"\\n\",\n    \"        # Categorical distribution for observed data\\n\",\n    \"        y_obs = pm.Categorical('y_obs', p=p, observed=y_data, dims='user')\\n\",\n    \"\\n\",\n    \"        # Sampling\\n\",\n    \"        trace = pm.sample(tune=5000, draws=5000)\\n\",\n    \"        posterior_predictive = pm.sample_posterior_predictive(trace)\\n\",\n    \"        prior_predictive = pm.sample_prior_predictive()\\n\",\n    \"\\n\",\n    \"    except pm.exceptions.SamplingError:\\n\",\n    \"        model.debug(verbose=True)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"\\n\",\n    \"print(az.summary(trace))\\n\",\n    \"\\n\",\n    \"y_pred = np.rint(posterior_predictive['posterior_predictive']['y_obs'].mean(axis=(0,1))) \\n\",\n    \"\\n\",\n    \"plt.scatter(y, y_pred)\\n\",\n    \"plt.xlabel('Actual Group ID')\\n\",\n    \"plt.ylabel('Predicted Group ID')\\n\",\n    \"plt.show()\\n\",\n    \"\\n\",\n    \"plt.scatter(y, y_pred - y)\\n\",\n    \"plt.xlabel('Actual Group ID')\\n\",\n    \"plt.ylabel('Residual')\\n\",\n    \"plt.show()\\n\",\n    \"\\n\",\n    \"print(az.summary(trace))\\n\",\n    \"\\n\",\n    \"plt.hist(y_pred, bins=num_groups, alpha=0.5, label='Predicted')\\n\",\n    \"plt.hist(y,  bins=num_groups, alpha=0.5, label='Actual')\\n\",\n    \"plt.legend(loc='upper right')\\n\",\n    \"plt.xlabel(\\\"Group ID\\\")\\n\",\n    \"plt.ylabel(\\\"Frequency\\\")\\n\",\n    \"plt.show()\\n\",\n    \"samples = posterior_predictive['posterior_predictive']['y_obs'].to_numpy()\\n\",\n    \"users = [[] for _ in range(samples.shape[2])]\\n\",\n    \"for chain in range(samples.shape[0]):\\n\",\n    \"  for draw in range(samples.shape[1]):\\n\",\n    \"    for user in range(samples.shape[2]):\\n\",\n    \"      users[user].append(samples[chain, draw, user])\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"# Define the grid layout\\n\",\n    \"num_users = len(users)\\n\",\n    \"num_rows = int(num_users**0.5)  # Number of rows in the grid\\n\",\n    \"num_cols = (num_users + num_rows - 1) // num_rows  # Number of columns in the grid\\n\",\n    \"\\n\",\n    \"# Create subplots\\n\",\n    \"fig, axes = plt.subplots(num_rows, num_cols, figsize=(15, 10))\\n\",\n    \"\\n\",\n    \"# Iterate through users and plot histograms\\n\",\n    \"for user_idx, ax in enumerate(axes.flat):\\n\",\n    \"    if user_idx < num_users:\\n\",\n    \"        user_data = users[user_idx]\\n\",\n    \"        actual_interaction = y[user_idx]\\n\",\n    \"\\n\",\n    \"        ax.hist(user_data, bins=num_groups)\\n\",\n    \"        ax.axvline(actual_interaction, color='r', linestyle='dashed', linewidth=1)\\n\",\n    \"\\n\",\n    \"        ax.set_title(f'User {user_idx + 1}')\\n\",\n    \"        ax.set_xlabel('Interactions')\\n\",\n    \"        ax.set_ylabel('Frequency')\\n\",\n    \"\\n\",\n    \"# Remove any empty subplots\\n\",\n    \"for user_idx in range(num_users, num_rows * num_cols):\\n\",\n    \"    fig.delaxes(axes.flat[user_idx])\\n\",\n    \"\\n\",\n    \"plt.tight_layout()\\n\",\n    \"plt.show()\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/choice_model.ipynb b/choice_model.ipynb
--- a/choice_model.ipynb	(revision 3b7b0412402067509ecf9d4c71e81b92724a274c)
+++ b/choice_model.ipynb	(date 1701723603695)
@@ -2,11 +2,11 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 109,
+   "execution_count": 9,
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2023-11-28T21:15:53.923576Z",
-     "start_time": "2023-11-28T21:15:53.501095Z"
+     "end_time": "2023-12-04T20:54:19.650967Z",
+     "start_time": "2023-12-04T20:53:55.261136Z"
     }
    },
    "outputs": [
@@ -30,62 +30,30 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "/usr/local/lib/python3.11/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\n",
+      "/Users/connorg0110/Library/Python/3.11/lib/python/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\n",
       "  warnings.warn(\n",
-      "/usr/local/lib/python3.11/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\n",
+      "/Users/connorg0110/Library/Python/3.11/lib/python/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\n",
       "  warnings.warn(\n",
-      "/usr/local/lib/python3.11/site-packages/pymc/distributions/timeseries.py:558: UserWarning: Initial distribution not specified, defaulting to `Normal.dist(0, 100, shape=...)`. You can specify an init_dist manually to suppress this warning.\n",
+      "/Users/connorg0110/Library/Python/3.11/lib/python/site-packages/pymc/distributions/timeseries.py:558: UserWarning: Initial distribution not specified, defaulting to `Normal.dist(0, 100, shape=...)`. You can specify an init_dist manually to suppress this warning.\n",
       "  warnings.warn(\n",
       "Auto-assigning NUTS sampler...\n",
       "Initializing NUTS using jitter+adapt_diag...\n",
       "Multiprocess sampling (4 chains in 4 jobs)\n",
-      "NUTS: [phi, sigma_ar, ar, sigma]\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n"
+      "NUTS: [phi, sigma_ar, ar, sigma]\n"
      ]
     },
     {
      "data": {
-      "text/html": [
-       "\n",
-       "<style>\n",
-       "    /* Turns off some styling */\n",
-       "    progress {\n",
-       "        /* gets rid of default border in Firefox and Opera. */\n",
-       "        border: none;\n",
-       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
-       "        background-size: auto;\n",
-       "    }\n",
-       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
-       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
-       "    }\n",
-       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
-       "        background: #F44336;\n",
-       "    }\n",
-       "</style>\n"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
+      "text/plain": "<IPython.core.display.HTML object>",
+      "text/html": "\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n"
      },
      "metadata": {},
      "output_type": "display_data"
     },
     {
      "data": {
-      "text/html": [
-       "\n",
-       "    <div>\n",
-       "      <progress value='8000' class='' max='8000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
-       "      100.00% [8000/8000 00:19&lt;00:00 Sampling 4 chains, 71 divergences]\n",
-       "    </div>\n",
-       "    "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
+      "text/plain": "<IPython.core.display.HTML object>",
+      "text/html": "\n    <div>\n      <progress value='0' class='' max='8000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      \n    </div>\n    "
      },
      "metadata": {},
      "output_type": "display_data"
@@ -94,53 +62,25 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 30 seconds.\n",
+      "Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 4 seconds.\n",
       "The rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\n",
       "The effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n",
-      "There were 71 divergences after tuning. Increase `target_accept` or reparameterize.\n",
+      "There were 82 divergences after tuning. Increase `target_accept` or reparameterize.\n",
       "Sampling: [y_obs]\n"
      ]
     },
     {
      "data": {
-      "text/html": [
-       "\n",
-       "<style>\n",
-       "    /* Turns off some styling */\n",
-       "    progress {\n",
-       "        /* gets rid of default border in Firefox and Opera. */\n",
-       "        border: none;\n",
-       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
-       "        background-size: auto;\n",
-       "    }\n",
-       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
-       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
-       "    }\n",
-       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
-       "        background: #F44336;\n",
-       "    }\n",
-       "</style>\n"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
+      "text/plain": "<IPython.core.display.HTML object>",
+      "text/html": "\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n"
      },
      "metadata": {},
      "output_type": "display_data"
     },
     {
      "data": {
-      "text/html": [
-       "\n",
-       "    <div>\n",
-       "      <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
-       "      100.00% [4000/4000 00:00&lt;00:00]\n",
-       "    </div>\n",
-       "    "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
+      "text/plain": "<IPython.core.display.HTML object>",
+      "text/html": "\n    <div>\n      <progress value='0' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      \n    </div>\n    "
      },
      "metadata": {},
      "output_type": "display_data"
@@ -154,20 +94,16 @@
     },
     {
      "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
+      "text/plain": "<Figure size 640x480 with 1 Axes>",
+      "image/png": ""
      },
      "metadata": {},
      "output_type": "display_data"
     },
     {
      "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
+      "text/plain": "<Figure size 640x480 with 1 Axes>",
+      "image/png": "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"
      },
      "metadata": {},
      "output_type": "display_data"
@@ -177,94 +113,62 @@
      "output_type": "stream",
      "text": [
       "           mean      sd   hdi_3%  hdi_97%  mcse_mean  mcse_sd  ess_bulk  \\\n",
-      "phi[0]   -0.423  65.644 -129.964  113.623      1.289    1.411    2622.0   \n",
-      "phi[1]    0.977  66.437 -127.093  120.406      1.175    1.238    3208.0   \n",
-      "phi[2]   -1.415  67.180 -126.565  125.368      1.511    1.282    1974.0   \n",
-      "phi[3]   -1.380  65.897 -129.812  116.797      1.616    1.286    1697.0   \n",
-      "phi[4]    2.330  69.375 -125.138  129.934      1.870    1.390    1386.0   \n",
-      "ar[0]    -0.048   1.429   -2.803    2.605      0.025    0.033    3583.0   \n",
-      "ar[1]    -0.022   1.495   -2.607    3.035      0.026    0.038    4104.0   \n",
-      "ar[2]    -0.985   1.462   -3.712    1.877      0.026    0.036    3645.0   \n",
-      "ar[3]     0.012   1.354   -2.798    2.462      0.023    0.035    3093.0   \n",
-      "ar[4]     1.007   1.323   -1.520    3.563      0.022    0.030    3833.0   \n",
-      "sigma_ar  1.027   0.986    0.002    2.789      0.018    0.013    2094.0   \n",
-      "sigma     1.063   0.961    0.103    2.741      0.055    0.039     200.0   \n",
+      "phi[0]   -0.360  88.084 -168.859  155.724      2.088    1.542    1809.0   \n",
+      "phi[1]   -0.864  87.574 -159.700  170.575      1.915    1.737    2103.0   \n",
+      "phi[2]   -4.849  89.666 -175.769  156.276      1.682    1.601    2835.0   \n",
+      "phi[3]    1.248  89.110 -163.985  159.433      2.775    1.963    1047.0   \n",
+      "phi[4]   -2.637  85.612 -161.122  156.289      1.682    1.495    2605.0   \n",
+      "ar[0]     0.016   1.506   -2.836    2.862      0.027    0.037    3666.0   \n",
+      "ar[1]    -0.025   1.436   -2.710    2.901      0.024    0.031    4036.0   \n",
+      "ar[2]     0.013   1.535   -3.137    2.728      0.026    0.036    3880.0   \n",
+      "ar[3]    -4.990   1.534   -7.862   -1.944      0.028    0.021    4025.0   \n",
+      "ar[4]     1.998   1.489   -1.116    4.689      0.024    0.033    4460.0   \n",
+      "sigma_ar  1.008   1.012    0.000    2.876      0.021    0.015    1887.0   \n",
+      "sigma     1.167   0.968    0.149    2.930      0.046    0.032     320.0   \n",
       "\n",
       "          ess_tail  r_hat  \n",
-      "phi[0]      1687.0   1.00  \n",
-      "phi[1]      2324.0   1.01  \n",
-      "phi[2]      1746.0   1.00  \n",
-      "phi[3]       865.0   1.00  \n",
-      "phi[4]      1715.0   1.01  \n",
-      "ar[0]       1330.0   1.01  \n",
-      "ar[1]       1265.0   1.01  \n",
-      "ar[2]       1081.0   1.00  \n",
-      "ar[3]       1400.0   1.00  \n",
-      "ar[4]       1223.0   1.01  \n",
-      "sigma_ar    1504.0   1.00  \n",
-      "sigma        191.0   1.02  \n"
+      "phi[0]      2512.0   1.00  \n",
+      "phi[1]      1692.0   1.00  \n",
+      "phi[2]      2168.0   1.01  \n",
+      "phi[3]       190.0   1.00  \n",
+      "phi[4]      1774.0   1.00  \n",
+      "ar[0]       1326.0   1.01  \n",
+      "ar[1]       1825.0   1.01  \n",
+      "ar[2]       1338.0   1.02  \n",
+      "ar[3]       1393.0   1.01  \n",
+      "ar[4]       1514.0   1.01  \n",
+      "sigma_ar    1407.0   1.00  \n",
+      "sigma        163.0   1.02  \n"
      ]
     },
     {
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "/usr/local/lib/python3.11/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\n",
+      "/Users/connorg0110/Library/Python/3.11/lib/python/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\n",
       "  warnings.warn(\n",
-      "/usr/local/lib/python3.11/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\n",
+      "/Users/connorg0110/Library/Python/3.11/lib/python/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\n",
       "  warnings.warn(\n",
-      "/usr/local/lib/python3.11/site-packages/pymc/distributions/timeseries.py:558: UserWarning: Initial distribution not specified, defaulting to `Normal.dist(0, 100, shape=...)`. You can specify an init_dist manually to suppress this warning.\n",
+      "/Users/connorg0110/Library/Python/3.11/lib/python/site-packages/pymc/distributions/timeseries.py:558: UserWarning: Initial distribution not specified, defaulting to `Normal.dist(0, 100, shape=...)`. You can specify an init_dist manually to suppress this warning.\n",
       "  warnings.warn(\n",
       "Auto-assigning NUTS sampler...\n",
       "Initializing NUTS using jitter+adapt_diag...\n",
       "Multiprocess sampling (4 chains in 4 jobs)\n",
-      "NUTS: [phi, sigma_ar, ar, sigma]\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n"
+      "NUTS: [phi, sigma_ar, ar, sigma]\n"
      ]
     },
     {
      "data": {
-      "text/html": [
-       "\n",
-       "<style>\n",
-       "    /* Turns off some styling */\n",
-       "    progress {\n",
-       "        /* gets rid of default border in Firefox and Opera. */\n",
-       "        border: none;\n",
-       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
-       "        background-size: auto;\n",
-       "    }\n",
-       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
-       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
-       "    }\n",
-       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
-       "        background: #F44336;\n",
-       "    }\n",
-       "</style>\n"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
+      "text/plain": "<IPython.core.display.HTML object>",
+      "text/html": "\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n"
      },
      "metadata": {},
      "output_type": "display_data"
     },
     {
      "data": {
-      "text/html": [
-       "\n",
-       "    <div>\n",
-       "      <progress value='8000' class='' max='8000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
-       "      100.00% [8000/8000 00:27&lt;00:00 Sampling 4 chains, 40 divergences]\n",
-       "    </div>\n",
-       "    "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
+      "text/plain": "<IPython.core.display.HTML object>",
+      "text/html": "\n    <div>\n      <progress value='0' class='' max='8000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      \n    </div>\n    "
      },
      "metadata": {},
      "output_type": "display_data"
@@ -273,53 +177,25 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 37 seconds.\n",
+      "Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 6 seconds.\n",
       "The rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\n",
       "The effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n",
-      "There were 40 divergences after tuning. Increase `target_accept` or reparameterize.\n",
+      "There were 140 divergences after tuning. Increase `target_accept` or reparameterize.\n",
       "Sampling: [y_obs]\n"
      ]
     },
     {
      "data": {
-      "text/html": [
-       "\n",
-       "<style>\n",
-       "    /* Turns off some styling */\n",
-       "    progress {\n",
-       "        /* gets rid of default border in Firefox and Opera. */\n",
-       "        border: none;\n",
-       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
-       "        background-size: auto;\n",
-       "    }\n",
-       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
-       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
-       "    }\n",
-       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
-       "        background: #F44336;\n",
-       "    }\n",
-       "</style>\n"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
+      "text/plain": "<IPython.core.display.HTML object>",
+      "text/html": "\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n"
      },
      "metadata": {},
      "output_type": "display_data"
     },
     {
      "data": {
-      "text/html": [
-       "\n",
-       "    <div>\n",
-       "      <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
-       "      100.00% [4000/4000 00:00&lt;00:00]\n",
-       "    </div>\n",
-       "    "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
+      "text/plain": "<IPython.core.display.HTML object>",
+      "text/html": "\n    <div>\n      <progress value='0' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      \n    </div>\n    "
      },
      "metadata": {},
      "output_type": "display_data"
@@ -333,20 +209,16 @@
     },
     {
      "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
+      "text/plain": "<Figure size 640x480 with 1 Axes>",
+      "image/png": ""
      },
      "metadata": {},
      "output_type": "display_data"
     },
     {
      "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
+      "text/plain": "<Figure size 640x480 with 1 Axes>",
+      "image/png": ""
      },
      "metadata": {},
      "output_type": "display_data"
@@ -355,53 +227,53 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "           mean      sd   hdi_3%  hdi_97%  mcse_mean  mcse_sd  ess_bulk  \\\n",
-      "phi[0]   -0.576  68.317 -121.140  131.145      1.259    1.399    2966.0   \n",
-      "phi[1]   -1.579  67.027 -126.471  120.885      1.268    1.311    2820.0   \n",
-      "phi[2]    0.642  64.382 -116.241  125.927      1.224    1.301    2779.0   \n",
-      "phi[3]   -1.226  66.530 -124.487  125.604      1.076    1.269    3870.0   \n",
-      "phi[4]    0.341  67.481 -122.379  129.297      1.314    1.315    2665.0   \n",
-      "phi[5]    1.211  72.005 -139.669  134.571      2.318    2.306    1062.0   \n",
-      "phi[6]   -0.443  68.047 -123.930  123.301      1.550    1.239    1966.0   \n",
-      "phi[7]   -0.459  64.729 -128.198  114.621      1.048    1.302    3810.0   \n",
-      "phi[8]    0.435  66.306 -126.338  119.917      1.160    1.177    3277.0   \n",
-      "phi[9]   -0.398  66.188 -127.010  120.126      1.117    1.253    3513.0   \n",
-      "ar[0]     0.003   1.545   -2.858    3.195      0.024    0.035    3909.0   \n",
-      "ar[1]    -0.016   1.629   -3.011    2.959      0.024    0.048    4702.0   \n",
-      "ar[2]    -0.024   1.573   -3.092    3.026      0.024    0.041    4596.0   \n",
-      "ar[3]     0.006   1.494   -2.938    2.890      0.024    0.042    3902.0   \n",
-      "ar[4]     0.056   1.500   -2.730    2.541      0.024    0.040    4393.0   \n",
-      "ar[5]     0.028   1.616   -2.968    3.014      0.027    0.040    4050.0   \n",
-      "ar[6]    -0.005   1.568   -3.188    2.861      0.024    0.039    4661.0   \n",
-      "ar[7]     0.029   1.558   -2.687    3.106      0.023    0.041    4988.0   \n",
-      "ar[8]     1.034   1.675   -2.111    3.771      0.025    0.046    4322.0   \n",
-      "ar[9]    -0.990   1.478   -3.777    2.013      0.022    0.043    4323.0   \n",
-      "sigma_ar  1.021   0.984    0.000    2.760      0.018    0.013    2098.0   \n",
-      "sigma     1.181   1.016    0.102    2.986      0.069    0.049     148.0   \n",
+      "            mean       sd   hdi_3%  hdi_97%  mcse_mean  mcse_sd  ess_bulk  \\\n",
+      "phi[0]     1.750   94.737 -152.074  177.001      7.479    5.298     155.0   \n",
+      "phi[1]    -3.029   92.142 -166.171  167.898      5.625    3.982     279.0   \n",
+      "phi[2]     6.337   87.301 -153.482  170.021      5.825    4.124     246.0   \n",
+      "phi[3]    -8.207   87.930 -159.619  158.852      6.206    4.394     207.0   \n",
+      "phi[4]    -1.745   89.117 -155.153  178.820      6.727    4.765     194.0   \n",
+      "phi[5]     4.620   85.481 -165.826  163.923      2.476    2.307    1128.0   \n",
+      "phi[6]   -10.266   90.298 -167.389  157.028      7.557    5.354     150.0   \n",
+      "phi[7]   -10.171  105.706 -225.543  145.331     13.717   12.806      82.0   \n",
+      "phi[8]     0.056   85.090 -168.249  164.343      1.665    2.256    2451.0   \n",
+      "phi[9]     2.352   82.648 -158.988  159.489      2.327    2.143    1356.0   \n",
+      "ar[0]     -0.008    1.417   -2.820    2.538      0.020    0.033    3850.0   \n",
+      "ar[1]     -0.027    1.314   -2.608    2.492      0.018    0.037    4606.0   \n",
+      "ar[2]      0.027    1.460   -2.815    2.818      0.024    0.037    4392.0   \n",
+      "ar[3]     -0.018    1.418   -2.585    2.695      0.022    0.035    4101.0   \n",
+      "ar[4]     -0.001    1.355   -2.726    2.713      0.018    0.034    4493.0   \n",
+      "ar[5]     -0.025    1.388   -2.813    2.716      0.019    0.044    4580.0   \n",
+      "ar[6]      0.003    1.402   -2.817    2.767      0.021    0.033    4705.0   \n",
+      "ar[7]     -0.040    1.387   -3.138    2.444      0.020    0.035    4763.0   \n",
+      "ar[8]      2.004    1.381   -0.631    4.802      0.019    0.029    5159.0   \n",
+      "ar[9]     -4.977    1.369   -7.624   -1.991      0.020    0.018    4094.0   \n",
+      "sigma_ar   0.920    0.960    0.001    2.737      0.038    0.027     284.0   \n",
+      "sigma      1.037    0.955    0.074    2.798      0.109    0.078      25.0   \n",
       "\n",
       "          ess_tail  r_hat  \n",
-      "phi[0]       906.0   1.01  \n",
-      "phi[1]      1629.0   1.00  \n",
-      "phi[2]      1576.0   1.00  \n",
-      "phi[3]      2431.0   1.00  \n",
-      "phi[4]      2388.0   1.00  \n",
-      "phi[5]       442.0   1.01  \n",
-      "phi[6]      2507.0   1.00  \n",
-      "phi[7]      2418.0   1.00  \n",
-      "phi[8]      1956.0   1.00  \n",
-      "phi[9]      2421.0   1.00  \n",
-      "ar[0]       1217.0   1.02  \n",
-      "ar[1]       1047.0   1.01  \n",
-      "ar[2]       1238.0   1.01  \n",
-      "ar[3]       1134.0   1.01  \n",
-      "ar[4]        829.0   1.01  \n",
-      "ar[5]       1098.0   1.01  \n",
-      "ar[6]       1085.0   1.01  \n",
-      "ar[7]       1017.0   1.01  \n",
-      "ar[8]       1237.0   1.02  \n",
-      "ar[9]        989.0   1.01  \n",
-      "sigma_ar    1544.0   1.00  \n",
-      "sigma        111.0   1.03  \n"
+      "phi[0]       710.0   1.03  \n",
+      "phi[1]        76.0   1.07  \n",
+      "phi[2]      1774.0   1.02  \n",
+      "phi[3]      1732.0   1.02  \n",
+      "phi[4]        77.0   1.02  \n",
+      "phi[5]      1322.0   1.01  \n",
+      "phi[6]        92.0   1.02  \n",
+      "phi[7]        16.0   1.05  \n",
+      "phi[8]      2128.0   1.01  \n",
+      "phi[9]      1225.0   1.01  \n",
+      "ar[0]       1313.0   1.06  \n",
+      "ar[1]       1415.0   1.05  \n",
+      "ar[2]       1005.0   1.08  \n",
+      "ar[3]        975.0   1.05  \n",
+      "ar[4]       1315.0   1.07  \n",
+      "ar[5]        772.0   1.08  \n",
+      "ar[6]       1140.0   1.05  \n",
+      "ar[7]       1222.0   1.08  \n",
+      "ar[8]       1188.0   1.06  \n",
+      "ar[9]       1189.0   1.06  \n",
+      "sigma_ar      72.0   1.03  \n",
+      "sigma         14.0   1.11  \n"
      ]
     }
    ],
@@ -1108,83 +980,44 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
-   "metadata": {},
+   "execution_count": 10,
    "outputs": [
     {
-     "name": "stderr",
+     "name": "stdout",
      "output_type": "stream",
      "text": [
-      "/usr/local/lib/python3.11/site-packages/pymc/data.py:433: UserWarning: The `mutable` kwarg was not specified. Before v4.1.0 it defaulted to `pm.Data(mutable=True)`, which is equivalent to using `pm.MutableData()`. In v4.1.0 the default changed to `pm.Data(mutable=False)`, equivalent to `pm.ConstantData`. Use `pm.ConstantData`/`pm.MutableData` or pass `pm.Data(..., mutable=False/True)` to avoid this warning.\n",
-      "  warnings.warn(\n",
-      "Multiprocess sampling (4 chains in 4 jobs)\n",
-      "CompoundStep\n",
-      ">CompoundStep\n",
-      ">>Metropolis: [alpha]\n",
-      ">>Metropolis: [beta]\n",
-      ">NUTS: [beta_mu, beta_sd]\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n",
-      "WARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n"
+      "[]\n"
      ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "\n",
-       "<style>\n",
-       "    /* Turns off some styling */\n",
-       "    progress {\n",
-       "        /* gets rid of default border in Firefox and Opera. */\n",
-       "        border: none;\n",
-       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
-       "        background-size: auto;\n",
-       "    }\n",
-       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
-       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
-       "    }\n",
-       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
-       "        background: #F44336;\n",
-       "    }\n",
-       "</style>\n"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "\n",
-       "    <div>\n",
-       "      <progress value='3596' class='' max='40000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
-       "      8.99% [3596/40000 00:49&lt;08:22 Sampling 4 chains, 0 divergences]\n",
-       "    </div>\n",
-       "    "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
+    }
+   ],
+   "source": [],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-04T20:54:31.062181Z",
+     "start_time": "2023-12-04T20:54:31.056545Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2023-12-04T20:56:39.811108Z",
+     "start_time": "2023-12-04T20:56:39.794738Z"
+    }
+   },
+   "outputs": [
     {
-     "ename": "ValueError",
-     "evalue": "Not enough samples to build a trace.",
+     "ename": "NameError",
+     "evalue": "name 'groups' is not defined",
      "output_type": "error",
      "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
-      "\u001b[1;32m/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb Cell 6\u001b[0m line \u001b[0;36m6\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb#W1sZmlsZQ%3D%3D?line=59'>60</a>\u001b[0m y_obs \u001b[39m=\u001b[39m pm\u001b[39m.\u001b[39mCategorical(\u001b[39m'\u001b[39m\u001b[39my_obs\u001b[39m\u001b[39m'\u001b[39m, p\u001b[39m=\u001b[39mp, observed\u001b[39m=\u001b[39my_data, dims\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39muser\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb#W1sZmlsZQ%3D%3D?line=61'>62</a>\u001b[0m \u001b[39m# Sampling\u001b[39;00m\n\u001b[0;32m---> <a href='vscode-notebook-cell:/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb#W1sZmlsZQ%3D%3D?line=62'>63</a>\u001b[0m trace \u001b[39m=\u001b[39m pm\u001b[39m.\u001b[39;49msample(tune\u001b[39m=\u001b[39;49m\u001b[39m5000\u001b[39;49m, draws\u001b[39m=\u001b[39;49m\u001b[39m5000\u001b[39;49m)\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb#W1sZmlsZQ%3D%3D?line=63'>64</a>\u001b[0m posterior_predictive \u001b[39m=\u001b[39m pm\u001b[39m.\u001b[39msample_posterior_predictive(trace)\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/user/Desktop/stat6300_Final_Project/choice_model.ipynb#W1sZmlsZQ%3D%3D?line=64'>65</a>\u001b[0m prior_predictive \u001b[39m=\u001b[39m pm\u001b[39m.\u001b[39msample_prior_predictive()\n",
-      "File \u001b[0;32m/usr/local/lib/python3.11/site-packages/pymc/sampling/mcmc.py:827\u001b[0m, in \u001b[0;36msample\u001b[0;34m(draws, tune, chains, cores, random_seed, progressbar, step, nuts_sampler, initvals, init, jitter_max_retries, n_init, trace, discard_tuned_samples, compute_convergence_checks, keep_warning_stat, return_inferencedata, idata_kwargs, nuts_sampler_kwargs, callback, mp_ctx, model, **kwargs)\u001b[0m\n\u001b[1;32m    823\u001b[0m t_sampling \u001b[39m=\u001b[39m time\u001b[39m.\u001b[39mtime() \u001b[39m-\u001b[39m t_start\n\u001b[1;32m    825\u001b[0m \u001b[39m# Packaging, validating and returning the result was extracted\u001b[39;00m\n\u001b[1;32m    826\u001b[0m \u001b[39m# into a function to make it easier to test and refactor.\u001b[39;00m\n\u001b[0;32m--> 827\u001b[0m \u001b[39mreturn\u001b[39;00m _sample_return(\n\u001b[1;32m    828\u001b[0m     run\u001b[39m=\u001b[39;49mrun,\n\u001b[1;32m    829\u001b[0m     traces\u001b[39m=\u001b[39;49mtraces,\n\u001b[1;32m    830\u001b[0m     tune\u001b[39m=\u001b[39;49mtune,\n\u001b[1;32m    831\u001b[0m     t_sampling\u001b[39m=\u001b[39;49mt_sampling,\n\u001b[1;32m    832\u001b[0m     discard_tuned_samples\u001b[39m=\u001b[39;49mdiscard_tuned_samples,\n\u001b[1;32m    833\u001b[0m     compute_convergence_checks\u001b[39m=\u001b[39;49mcompute_convergence_checks,\n\u001b[1;32m    834\u001b[0m     return_inferencedata\u001b[39m=\u001b[39;49mreturn_inferencedata,\n\u001b[1;32m    835\u001b[0m     keep_warning_stat\u001b[39m=\u001b[39;49mkeep_warning_stat,\n\u001b[1;32m    836\u001b[0m     idata_kwargs\u001b[39m=\u001b[39;49midata_kwargs \u001b[39mor\u001b[39;49;00m {},\n\u001b[1;32m    837\u001b[0m     model\u001b[39m=\u001b[39;49mmodel,\n\u001b[1;32m    838\u001b[0m )\n",
-      "File \u001b[0;32m/usr/local/lib/python3.11/site-packages/pymc/sampling/mcmc.py:858\u001b[0m, in \u001b[0;36m_sample_return\u001b[0;34m(run, traces, tune, t_sampling, discard_tuned_samples, compute_convergence_checks, return_inferencedata, keep_warning_stat, idata_kwargs, model)\u001b[0m\n\u001b[1;32m    856\u001b[0m \u001b[39m# Pick and slice chains to keep the maximum number of samples\u001b[39;00m\n\u001b[1;32m    857\u001b[0m \u001b[39mif\u001b[39;00m discard_tuned_samples:\n\u001b[0;32m--> 858\u001b[0m     traces, length \u001b[39m=\u001b[39m _choose_chains(traces, tune)\n\u001b[1;32m    859\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[1;32m    860\u001b[0m     traces, length \u001b[39m=\u001b[39m _choose_chains(traces, \u001b[39m0\u001b[39m)\n",
-      "File \u001b[0;32m/usr/local/lib/python3.11/site-packages/pymc/backends/base.py:601\u001b[0m, in \u001b[0;36m_choose_chains\u001b[0;34m(traces, tune)\u001b[0m\n\u001b[1;32m    599\u001b[0m lengths \u001b[39m=\u001b[39m [\u001b[39mmax\u001b[39m(\u001b[39m0\u001b[39m, \u001b[39mlen\u001b[39m(trace) \u001b[39m-\u001b[39m tune) \u001b[39mfor\u001b[39;00m trace \u001b[39min\u001b[39;00m traces]\n\u001b[1;32m    600\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39msum\u001b[39m(lengths):\n\u001b[0;32m--> 601\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(\u001b[39m\"\u001b[39m\u001b[39mNot enough samples to build a trace.\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[1;32m    603\u001b[0m idxs \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39margsort(lengths)\n\u001b[1;32m    604\u001b[0m l_sort \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39marray(lengths)[idxs]\n",
-      "\u001b[0;31mValueError\u001b[0m: Not enough samples to build a trace."
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mNameError\u001B[0m                                 Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[11], line 2\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[38;5;66;03m# multinomial logit model for group interactions\u001B[39;00m\n\u001B[0;32m----> 2\u001B[0m num_groups \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mlen\u001B[39m(\u001B[43mgroups\u001B[49m)\n\u001B[1;32m      3\u001B[0m y \u001B[38;5;241m=\u001B[39m []\n\u001B[1;32m      4\u001B[0m X \u001B[38;5;241m=\u001B[39m []\n",
+      "\u001B[0;31mNameError\u001B[0m: name 'groups' is not defined"
      ]
     }
    ],
